/**
 * Statistics about model/script types
 */
import { Backend } from './backend';

export class Stats {
  /**
   *
   * @param key - a String of the name of the key storing the model or script value
   * @param type - a String of the type of value (i.e. 'MODEL' or 'SCRIPT')
   * @param backend -  a String of the type of backend (always 'TORCH' for 'SCRIPT' value type)
   * @param device - the device that will execute the model. can be of CPU or GPU
   */
  constructor(key: string, type: string, backend: Backend, device: string) {
    this._key = key;
    this._type = type;
    this._backend = backend;
    this._device = device;
    this._duration = 0;
    this._samples = 0;
    this._calls = 0;
    this._errors = 0;
    this._tag = undefined;
  }

  // a String of the device where execution took place
  private _device: string;

  get device(): string {
    return this._device;
  }

  set device(value: string) {
    this._device = value;
  }

  // the cumulative duration of executions in microseconds
  private _duration: number;

  get duration(): number {
    return this._duration;
  }

  set duration(value: number) {
    this._duration = value;
  }

  // the cumulative number of samples obtained from the 0th (batch) dimension (only applicable for RedisAI models)
  private _samples: number;

  get samples(): number {
    return this._samples;
  }

  set samples(value: number) {
    this._samples = value;
  }

  // the total number of executions
  private _calls: number;

  get calls(): number {
    return this._calls;
  }

  set calls(value: number) {
    this._calls = value;
  }

  //  the total number of errors generated by executions (excluding any errors generated during parsing commands)
  private _errors: number;

  get errors(): number {
    return this._errors;
  }

  set errors(value: number) {
    this._errors = value;
  }

  private _key: string;

  get key(): string {
    return this._key;
  }

  set key(value: string) {
    this._key = value;
  }

  private _type: string;

  get type(): string {
    return this._type;
  }

  set type(value: string) {
    this._type = value;
  }

  private _backend: Backend;

  get backend(): Backend {
    return this._backend;
  }

  set backend(value: Backend) {
    this._backend = value;
  }

  // tag is an optional string for tagging the model/script such as a version number or any arbitrary identifier
  private _tag: string | undefined;

  get tag(): string | undefined {
    return this._tag;
  }

  /**
   * sets an optional string for tagging the model/scrit such as a version number or any arbitrary identifier
   * @param value
   */
  set tag(value: string | undefined) {
    this._tag = value;
  }
}
